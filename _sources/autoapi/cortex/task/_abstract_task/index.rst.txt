cortex.task._abstract_task
==========================

.. py:module:: cortex.task._abstract_task


Classes
-------

.. autoapisummary::

   cortex.task._abstract_task.BaseTask


Module Contents
---------------

.. py:class:: BaseTask(data_module: cortex.data.data_module.TaskDataModule, input_map: dict[str, str], leaf_key: str, corrupt_train_inputs: bool = False, corrupt_inference_inputs: bool = False, **kwargs)

   Bases: :py:obj:`abc.ABC`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: data_module


   .. py:attribute:: input_map


   .. py:attribute:: leaf_key


   .. py:attribute:: _dataloaders


   .. py:attribute:: corrupt_train_inputs
      :value: False



   .. py:attribute:: corrupt_inference_inputs
      :value: False



   .. py:method:: sample_minibatch(split: str = 'train', as_df: bool = False) -> dict | pandas.DataFrame

      Return a random minibatch of data formatted for a `NeuralTree` object



   .. py:method:: format_batch(batch: collections.OrderedDict, corrupt_frac: float = None) -> dict

      Format a batch of data for a `NeuralTree` object



   .. py:method:: format_inputs(batch: collections.OrderedDict) -> dict
      :abstractmethod:


      Format input DataFrame for a `NeuralTree` object



   .. py:method:: create_leaf(**kwargs) -> cortex.model.leaf.LeafNode
      :abstractmethod:



   .. py:method:: compute_eval_metrics(**kwargs) -> dict
      :abstractmethod:



