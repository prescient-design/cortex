cortex.io._download
===================

.. py:module:: cortex.io._download


Attributes
----------

.. autoapisummary::

   cortex.io._download.USER_AGENT
   cortex.io._download._COMPRESSED_FILE_OPENERS
   cortex.io._download._ARCHIVE_EXTRACTORS


Functions
---------

.. autoapisummary::

   cortex.io._download.extract_archive
   cortex.io._download._extract_tar
   cortex.io._download._extract_zip
   cortex.io._download._get_google_drive_file_id
   cortex.io._download._get_redirect_url
   cortex.io._download._google_drive_download
   cortex.io._download._parse_google_drive_response
   cortex.io._download._save_response_content
   cortex.io._download._urlretrieve
   cortex.io._download._s3_download
   cortex.io._download.download
   cortex.io._download.download_and_extract_archive


Module Contents
---------------

.. py:data:: USER_AGENT
   :value: 'cortex/Uninferable'


.. py:data:: _COMPRESSED_FILE_OPENERS
   :type:  dict[str, Callable[Ellipsis, IO]]

.. py:function:: extract_archive(source: str, destination: Optional[str] = None, remove_archive: bool = False) -> str

.. py:function:: _extract_tar(source: str, destination: str, compression: Optional[str]) -> None

.. py:function:: _extract_zip(source: str, destination: str, compression: Optional[str]) -> None

.. py:data:: _ARCHIVE_EXTRACTORS
   :type:  dict[str, Callable[[str, str, Optional[str]], None]]

.. py:function:: _get_google_drive_file_id(url: str) -> Optional[str]

.. py:function:: _get_redirect_url(url: str, maximum_hops: int = 3) -> str

.. py:function:: _google_drive_download(source: str, destination: str, filename: Optional[str] = None, checksum: Optional[str] = None)

.. py:function:: _parse_google_drive_response(response, chunk_size: int = 32 * 1024) -> Tuple[bytes, Iterator[bytes]]

.. py:function:: _save_response_content(chunks: Iterator[bytes], destination: str, length: Optional[int] = None)

.. py:function:: _urlretrieve(url: str, filename: str, chunk_size: int = 1024 * 32)

.. py:function:: _s3_download(s3_path: Union[upath.UPath, pathlib.Path, str], local_path: Union[upath.UPath, pathlib.Path, str], boto3_s3_client: Optional[botocore.client.BaseClient] = None)

   Download a file from an S3 bucket and save it to a local path.

   :param s3_path: The S3 bucket path of the file to be downloaded.
   :type s3_path: Union[UPath, Path, str]
   :param local_path: The local file path where the downloaded file will be saved.
   :type local_path: Union[UPath, Path, str]
   :param boto3_s3_client: The boto S3 client to use, by default None.
   :type boto3_s3_client: Optional[BaseClient], optional


.. py:function:: download(source: Union[str, pathlib.Path], destination: Union[str, pathlib.Path], filename: Union[str, None] = None, checksum: Union[str, None] = None, maximum_redirect_url_hops: int = 3, boto3_s3_client: Union[botocore.client.BaseClient, None] = None)

   Download a file from a URL and save it to a local path.
   Supports standard URLs, Google Drive, and S3.

   :param source: The URL of the file to be downloaded.
   :type source: str | Path
   :param destination: The local directory where the downloaded file will be saved.
   :type destination: str | Path
   :param filename: The name of the file to be saved, by default None.
   :type filename: str | None, optional
   :param checksum: The checksum of the file to be downloaded, by default None.
   :type checksum: str | None, optional
   :param maximum_redirect_url_hops: The maximum number of hops to follow when resolving a URL redirect, by default 3.
   :type maximum_redirect_url_hops: int, optional
   :param boto3_s3_client: The boto S3 client to use, by default None.
   :type boto3_s3_client: BaseClient | None, optional


.. py:function:: download_and_extract_archive(resource: Union[str, pathlib.Path], source: Union[str, pathlib.Path], destination: Union[str, pathlib.Path, None] = None, name: Union[str, None] = None, checksum: Union[str, None] = None, remove_archive: bool = False) -> None

   Download and extract an archive file.

   :param resource: The URL of the resource to download.
   :type resource: str
   :param source: The directory where the archive file will be downloaded.
   :type source: str
   :param destination: The directory where the archive file will be extracted, by default None.
   :type destination: str, optional
   :param name: The name of the archive file, by default None.
   :type name: str, optional
   :param checksum: The checksum of the archive file, by default None.
   :type checksum: str, optional
   :param remove_archive: Whether to remove the archive file after extraction, by default False.
   :type remove_archive: bool, optional


