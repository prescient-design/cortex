cortex.data.dataset
===================

.. py:module:: cortex.data.dataset


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/cortex/data/dataset/_data_frame_dataset/index
   /autoapi/cortex/data/dataset/_numpy_dataset/index
   /autoapi/cortex/data/dataset/_rfp_dataset/index
   /autoapi/cortex/data/dataset/_tape_combined/index
   /autoapi/cortex/data/dataset/_tape_fluorescence/index
   /autoapi/cortex/data/dataset/_tape_stability/index
   /autoapi/cortex/data/dataset/_transformed_dataset/index


Classes
-------

.. autoapisummary::

   cortex.data.dataset.DataFrameDataset
   cortex.data.dataset.NumpyDataset
   cortex.data.dataset.RedFluorescentProteinDataset
   cortex.data.dataset.TAPEFluorescenceDataset
   cortex.data.dataset.TAPEStabilityDataset
   cortex.data.dataset.TAPECombinedDataset
   cortex.data.dataset.TransformedDataset


Functions
---------

.. autoapisummary::

   cortex.data.dataset.ordered_dict_collator


Package Contents
----------------

.. py:class:: DataFrameDataset(root: Union[str, pathlib.Path], *, download: bool = False, download_source: Optional[str] = None, dedup: bool = True, train: bool = True, random_seed: int = 3735928559, **kwargs: Any)

   Bases: :py:obj:`torch.utils.data.Dataset`


   .. py:attribute:: _data
      :type:  pandas.DataFrame


   .. py:attribute:: _name
      :type:  str
      :value: 'temp'



   .. py:attribute:: _target
      :type:  str
      :value: 'data.csv'



   .. py:attribute:: columns
      :value: None



   .. py:attribute:: _root


   .. py:method:: _read_data(path: str, dedup: bool, train: bool, random_seed: int, **kwargs: Any) -> pandas.DataFrame


   .. py:method:: __len__() -> int


   .. py:method:: _fetch_item(index) -> pandas.DataFrame


   .. py:method:: _format_item(item: pandas.DataFrame) -> collections.OrderedDict[str, Any]


   .. py:method:: __getitem__(index) -> collections.OrderedDict[str, Any]


.. py:function:: ordered_dict_collator(batch: list[collections.OrderedDict[str, Any]]) -> collections.OrderedDict[str, Any]

   Collates a batch of OrderedDicts into a single OrderedDict.


.. py:class:: NumpyDataset(data: dict[str, numpy.typing.NDArray], train: bool = True, random_seed: int = 3735928559)

   Bases: :py:obj:`cortex.data.dataset._data_frame_dataset.DataFrameDataset`


   Create a DataFrameDataset from a dictionary of numpy arrays stored in memory.
   Useful if not reading data from disk.


   .. py:attribute:: _data


   .. py:attribute:: columns


.. py:class:: RedFluorescentProteinDataset(root: str, download: bool = False, download_source: str = _DOWNLOAD_URL, **kwargs)

   Bases: :py:obj:`cortex.data.dataset._data_frame_dataset.DataFrameDataset`


   .. py:attribute:: _name
      :value: 'rfp'



   .. py:attribute:: _target
      :value: 'rfp_known_structures.csv'



   .. py:attribute:: columns
      :value: ['tokenized_seq', 'foldx_total_energy', 'SASA']



   .. py:attribute:: _data


.. py:class:: TAPEFluorescenceDataset(root: str, download: bool = False, download_source: str = _DOWNLOAD_URL, **kwargs)

   Bases: :py:obj:`cortex.data.dataset._data_frame_dataset.DataFrameDataset`


   .. py:attribute:: _name
      :value: 'tape_fluorescence'



   .. py:attribute:: _target
      :value: 'fluorescence'



   .. py:attribute:: columns
      :value: ['tokenized_seq', 'log_fluorescence']



   .. py:method:: _read_data(path: str, dedup: bool, train: bool, random_seed: int, **kwargs: Any) -> pandas.DataFrame


.. py:class:: TAPEStabilityDataset(root: str, download: bool = False, download_source: str = _DOWNLOAD_URL, **kwargs)

   Bases: :py:obj:`cortex.data.dataset._data_frame_dataset.DataFrameDataset`


   .. py:attribute:: _name
      :value: 'tape_stability'



   .. py:attribute:: _target
      :value: 'stability'



   .. py:attribute:: columns
      :value: ['tokenized_seq', 'stability_score']



   .. py:method:: _read_data(path: str, dedup: bool, train: bool, random_seed: int, **kwargs: Any) -> pandas.DataFrame


.. py:class:: TAPECombinedDataset(root: str, download: bool = False, **kwargs)

   Bases: :py:obj:`cortex.data.dataset._data_frame_dataset.DataFrameDataset`


   .. py:attribute:: columns
      :value: ['tokenized_seq', 'partition']



   .. py:attribute:: _data


.. py:class:: TransformedDataset(preprocessing_transforms: Optional[list] = None, runtime_transforms: Optional[list] = None, *args, **kwargs)

   Bases: :py:obj:`cortex.data.dataset.DataFrameDataset`


   .. py:attribute:: _data


   .. py:method:: _preprocess(data) -> pandas.DataFrame


   .. py:method:: __getitem__(index) -> collections.OrderedDict[str, Any]


